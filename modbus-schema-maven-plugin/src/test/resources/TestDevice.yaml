# $schema: https://modbus.basjes.nl/v1/ModbusSchema.json
#
# Modbus Schema Toolkit
# Copyright (C) 2019-2025 Niels Basjes
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an AS IS BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

description: 'A Device which combines all reference tests'
schemaFeatureLevel: 1
blocks:
  - id: 'BitSwappingBlock'
    description: 'Fields that are a BitSwapping'
    fields:
      - id:          'SwapEndian'
        description: 'SwapEndian function'
        # Reverse 16 bits: 0xABCD ( 10101011 11001101 ) into 0xB3D5 ( 10110011 11010101 )
        expression:   "hexstring(swapendian(hr:0))"
      - id:           'SwapBytes'
        description:  'SwapBytes function'
        # Reverse 2 bytes: 0xABCD into 0xCDAB
        expression:   "hexstring(swapbytes(hr:0))"

  - id: 'BitsetBlock'
    description: 'Fields that are a Bitset'
    fields:
      - id:          'Bitset1'
        description: 'Bitset 1 register'
        expression:  "bitset(hr:0                                  ; 0-> 'Zero'; 1-> 'One'; 2-> 'Two')"
      - id:          'Bitset1_NI'
        description: 'Bitset 1 register with "Not Implemented" value'
        expression:  "bitset(hr:0   ; 0xDEAD                       ; 0-> 'Zero'; 1-> 'One'; 2-> 'Two')"
      - id:          'Bitset2'
        description: 'Bitset 2 registers'
        expression:  "bitset(hr:0#2                                ; 0-> 'Zero'; 1-> 'One'; 2-> 'Two'; 16 -> 'Sixteen'; 17-> 'Seventeen'; 18-> 'Eighteen' )"
      - id:          'Bitset2_NI'
        description: 'Bitset 2 registers with "Not Implemented" value'
        expression:  "bitset(hr:0#2 ; 0xDEAD 0xDEAD                ; 0-> 'Zero'; 1-> 'One'; 2-> 'Two'; 16 -> 'Sixteen'; 17-> 'Seventeen'; 18-> 'Eighteen' )"
      - id:          'Bitset3'
        description: 'Bitset 3 registers'
        expression:  "bitset(hr:0#3                                ; 0  -> '0' ;  1-> '1' ;  2-> '2'; 16 -> '16'; 17-> '17'; 18-> '18' ; 32 -> '32'; 33-> '33'; 34-> '34' )"
      - id:          'Bitset3_NI'
        description: 'Bitset 3 registers with "Not Implemented" value'
        expression:  "bitset(hr:0#3 ; 0xDEAD 0xDEAD 0xDEAD         ; 0  -> '0' ;  1-> '1' ;  2-> '2'; 16 -> '16'; 17-> '17'; 18-> '18' ; 32 -> '32'; 33-> '33'; 34-> '34' )"
      - id:          'Bitset4'
        description: 'Bitset 4 registers'
        expression:  "bitset(hr:0#4                                ; 0  -> '0' ;  1-> '1' ;  2-> '2'; 16 -> '16'; 17-> '17'; 18-> '18' ; 32 -> '32'; 33-> '33'; 34-> '34' ; 48 -> '48'; 49-> '49'; 50-> '50' )"
      - id:          'Bitset4_NI'
        description: 'Bitset 4 registers with "Not Implemented" value'
        expression:  "bitset(hr:0#4 ; 0xDEAD 0xDEAD 0xDEAD 0xDEAD  ; 0  -> '0' ;  1-> '1' ;  2-> '2'; 16 -> '16'; 17-> '17'; 18-> '18' ; 32 -> '32'; 33-> '33'; 34-> '34' ; 48 -> '48'; 49-> '49'; 50-> '50' )"

  - id: 'SimpleValues'
    description: 'Fields that are simple values'
    fields:
      - id: 'DoublePos'
        expression: '  1234.11 '
      - id: 'DoubleNeg'
        expression: ' -1234.11 '
      - id: 'DoublePosBraces'
        expression: '( 1234.11)'
      - id: 'DoubleNegBraces'
        expression: '(-1234.11)'
      - id: 'LongPos'
        expression: '  1234 '
      - id: 'LongNeg'
        expression: ' -1234 '
      - id: 'LongPosBraces'
        expression: '( 1234)'
      - id: 'LongNegBraces'
        expression: '( -1234 )'

  - id: 'BasicOperations'
    description: 'Fields that are fixed values using basic operations'
    fields:
      - id: 'LongDoublePower'
        expression: ' 5  ^3.3'
      - id: 'DoubleLongPowerPos'
        expression: ' 5.5^3'
      - id: 'DoubleLongPowerNeg'
        expression: '10  ^-3'
      - id: 'DoubleDoublePower'
        expression: '5.5 ^3.3'
      - id: 'LongDoubleMultiply'
        expression: '5  *3.3'
      - id: 'DoubleLongMultiply'
        expression: '5.5*3'
      - id: 'DoubleDoubleMultiply'
        expression: '5.5*3.3'
      - id: 'LongDoubleImplicitMultiply'
        expression: '5 (3.3)'
      - id: 'LongDoubleLongImplicitMultiply'
        expression: '5 (1.1)*3'
      - id: 'LongLongDoubleImplicitMultiply'
        expression: '5 (3)*1.1'
      - id: 'DoubleLongImplicitMultiply1'
        expression: '5.5(3)'
      - id: 'DoubleLongImplicitMultiply2'
        expression: '(5.5)*3'
      - id: 'DoubleDoubleBracesImplicitMultiply'
        expression: '(5.5)(3.3)'
      - id: 'DoubleLongDoubleBracesImplicitMultiply'
        expression: '(1.1)*5(3.3)'
      - id: 'LongLongBracesImplicitMultiply'
        expression: '5 (3)'
      - id: 'LongLongDivide'
        expression: '5  /3'
      - id: 'LongDoubleDivide'
        expression: '5  /3.3'
      - id: 'DoubleLongDivide'
        expression: '5.5/3'
      - id: 'DoubleDoubleDivide'
        expression: '5.5/3.3'
      - id: 'LongDoubleAdd'
        expression: '5  +3.3'
      - id: 'DoubleLongAdd'
        expression: '5.5+3'
      - id: 'DoubleDoubleAdd'
        expression: '5.5+3.3'
      - id: 'LongDoubleMinus'
        expression: '5  -3.3'
      - id: 'DoubleLongMinus'
        expression: '5.5-3'
      - id: 'DoubleDoubleMinus'
        expression: '5.5-3.3'
      - id: 'LongLongMultiply'
        expression: '5*3'
      - id: 'LongLongAdd'
        expression: '5+3'
      - id: 'LongLongSubtract'
        expression: '5-3'


  - id: 'ComplexOperations'
    description: 'Fields that are fixed values using complex operations where PEMDAS is relevant'
    fields:
      - id: 'Pemdas1'
        expression: '  12 / 3 *  4 '
      - id: 'Pemdas2'
        expression: '   4 * 3 / 12 '

      # https://youtu.be/2hsW8_Wpffk
      - id: 'Pemdas3'
        expression: '3^3+4*(8-5)/6'

      # https://www.chilimath.com/lessons/introductory-algebra/order-of-operations-practice-problems/
      - id: 'Pemdas4'
        expression: '7-24/8*4+6'
      - id: 'Pemdas5'
        expression: '18/3-7+2*5'
      - id: 'Pemdas6'
        expression: '6*4/12+72/8-9'
      - id: 'Pemdas7'
        expression: '(17-6/2)+4*3'
      - id: 'Pemdas8'
        expression: '-2(1*4-2/2)+(6+2-3)'
      - id: 'Pemdas9'
        expression: '-1((3-4*7)/5)-2*24/6'
      - id: 'Pemdas10'
        expression: '(3*5^2/15)-(5-2^2)'
      - id: 'Pemdas11'
        expression: '(1^4*2^2+3^3)-2^5/4'
      - id: 'Pemdas12'
        expression: '(22/2-2*5)^2+(4-6/6)^2'

      # https://leverageedu.com/blog/pemdas/
      - id: 'Pemdas13'
        expression: '9 + (12 + 1)^2'
      - id: 'Pemdas14'
        expression: '7 + (-5(-10 - 1))^3'
      - id: 'Pemdas15'
        expression: '12 / 6 * 3 / 2'
      - id: 'Pemdas16'
        expression: '8 + (16 * 5^2 - 10)'
      - id: 'Pemdas17'
        expression: '7 * 3 + 10 * (25 / 5)'

      - id: 'Pemdas18'
        expression: '((-1 - (-21)) * 2) / (9 + 1) - (-15)^2'
      - id: 'Pemdas19'
        expression: '-24 + 3 + 8 - ((-1 + 13)^2 - (2 + 13))'
      - id: 'Pemdas20'
        expression: '(-30 * 2) / ((28 - 26) * (-19 - (-13)))'
      - id: 'Pemdas21'
        expression: '((-18 + 9) * 3) / (-10 - 22 + 18 + 5 )'
      - id: 'Pemdas22'
        expression: '(-23 - (8 + (-12) * 2 - 1 - 12)) / (-21 - (-20)) '


  - id: 'FieldCalculations'
    description: 'Calculations that combine the values of several fields'
    fields:
      - id: 'One'
        expression: "ieee754_32(hr:0#2)"
      - id: 'Two'
        expression: "ieee754_64(hr:2#4)"
      - id: 'Three'
        expression: "uint16(hr:6)"
      - id: 'Four'
        expression: "int16(hr:7)"
      - id: 'Factor'
        expression: "int16(swapendian(hr:8))"
      - id: 'Combined'
        expression: "(One+Two+Three+Four)*10^Factor"


  - id: 'PemdasFieldCalculations'
    description: 'Calculations that combine the values of several fields'
    fields:
      - id: 'Eight'
        expression: "int16(hr:0)"
      - id: 'Sixteen'
        expression: "int16(hr:1)"
      - id: 'Five'
        expression: "int16(hr:2)"
      - id: 'Two'
        expression: "int16(hr:3)"
      - id: 'Ten'
        expression: "int16(hr:4)"
      - id: 'Pemdas'
        # '8 + (16 * 5^2 - 10) = 398'
        expression: "Eight + (Sixteen * Five^Two - Ten)"

  - id: 'EUI48Block'
    description: 'Fields that are a EUI48'
    fields:
      - id: 'EUI48_3'
        description: 'EUI48 (3 registers)'
        expression: "eui48(hr:0#3 )"
      - id: 'EUI48_3_NI'
        description: 'EUI48 (3 registers) with "Not Implemented" value'
        expression: "eui48(hr:0#3 ; 0xDEAD 0xDEAD 0xDEAD  )"
      - id: 'EUI48_4'
        description: 'EUI48 (4 registers)'
        expression: "eui48(hr:0#4 )"
      - id: 'EUI48_4_NI'
        description: 'EUI48 (4 registers) with "Not Implemented" value'
        expression: "eui48(hr:0#4 ; 0xDEAD 0xDEAD 0xDEAD 0xDEAD )"

  - id: 'EnumBlock'
    description: 'Fields that are an Enum'
    fields:
      - id: 'Enum1'
        description: 'Enum 1 register'
        expression: "enum(hr:0 ; 0-> 'Off'; 1->'Manual'; 2-> 'Automatic')"
      - id: 'Enum1_NI'
        description: 'Enum  1 register with "Not Implemented" value'
        expression: "enum(hr:0 ; 0xDEAD ; 0-> 'Off'; 1->'Manual'; 2-> 'Automatic')"
      - id: 'Enum2'
        description: 'Enum 2 register'
        expression: "enum(hr:1#2 ; 0-> 'Off'; 1->'Manual'; 2-> 'Automatic'; 1000000 -> 'Million')"
      - id: 'Enum2_NI'
        description: 'Enum 2 register with "Not Implemented" value'
        expression: "enum(hr:1#2 ; 0xDEAD 0xDEAD ; 0xF00D 0xF00D ; 0-> 'Off'; 1->'Manual'; 2-> 'Automatic'; 1000000 -> 'Million')"

  - id: 'Float32Block'
    description: 'Fields that are a Float 32'
    fields:
      - id: 'Float32'
        description: 'Float 32'
        expression: "ieee754_32(hr:0#2)"
      - id: 'Float32_NI'
        description: 'Float 32 with "Not Implemented" value'
        expression: "ieee754_32(hr:0#2; 0xDEAD 0xDEAD; 0xF00D 0xF00D)"
      - id: 'Float32String'
        description: 'Float 32 converted to String'
        expression: "concat('>' , Float32 , '<')"
      - id: 'Float32_NIString'
        description: 'Float 32 converted to String'
        expression: "concat('>' , Float32_NI , '<')"

  - id: 'Float64Block'
    description: 'Fields that are a Float 64'
    fields:
      - id: 'Float64'
        description: 'Float 64'
        expression: "ieee754_64(hr:2#4)"
      - id: 'Float64_NI'
        description: 'Float 64 with "Not Implemented" value'
        expression: "ieee754_64(hr:2#4; 0xDEAD 0xDEAD 0xDEAD 0xDEAD; 0xF00D 0xF00D 0xF00D 0xF00D)"
      - id: 'Float64String'
        description: 'Float 64 converted to String'
        expression: "concat('>' , Float64 , '<')"
      - id: 'Float64_NIString'
        description: 'Float 64 converted to String'
        expression: "concat('>' , Float64_NI , '<')"
  - id: 'IPv4Block'
    description: 'Fields that are a IPv4'
    fields:
      - id: 'IPv4'
        description: 'IPv4'
        expression: "ipv4addr(hr:0#2)"
      - id: 'IPv4_NI'
        description: 'IPv4 with "Not Implemented" value'
        expression: "ipv4addr(hr:0#2 ; 0x0000 0x0000)"
  - id: 'IPv6Block'
    description: 'Fields that are a IPv6'
    fields:
      - id: 'IPv6'
        description: 'IPv6'
        expression: 'ipv6addr(hr:0#8)'
      - id: 'IPv6_NI'
        description: 'IPv6 with "Not Implemented" value'
        expression: 'ipv6addr(hr:0#8 ; 0xDEAD 0xDEAD 0xDEAD 0xDEAD 0xDEAD 0xDEAD 0xDEAD 0xDEAD)'
  - id: 'Integer16Block'
    description: 'Fields that are a 16 bit integer'
    fields:
      - id:          'Int16'
        description: 'Int 16'
        expression:  'int16(hr:0)'
      - id:          'Int16_NI'
        description: 'Int 16 with "Not Implemented" value'
        expression:  'int16(hr:0; 0xDEAD)'
      - id:          'UnsignedInt16'
        description: 'Unsigned Int 16'
        expression:  'uint16(hr:0)'
      - id:          'UnsignedInt16_NI'
        description: 'Unsigned Int 16 with "Not Implemented" value'
        expression:  'uint16(hr:0; 0xDEAD)'
      - id:          'Int16Constant'
        description: 'Int 16'
        expression:  'int16("0xCFC7")'
      - id:          'UnsignedInt16Constant'
        description: 'Unsigned Int 16 Constant'
        expression:  'uint16("0xCFC7")'
      - id:          'Int16String'
        description: 'Int 16 converted to String'
        expression:   "concat('>' , Int16Constant - UnsignedInt16 , '<')"

  - id: 'Integer32Block'
    description: 'Fields that are a 32 bit integer'
    fields:
      - id: 'Int32'
        description:  'Int 32'
        expression: 'int32(hr:0#2)'
      - id: 'Int32_NI'
        description:  'Int 32 with "Not Implemented" value'
        expression: 'int32(hr:0#2; 0xDEAD 0xDEAD)'
      - id: 'UnsignedInt32'
        description:  'Unsigned Int 32'
        expression: 'uint32(hr:0#2)'
      - id: 'UnsignedInt32_NI'
        description:  'Unsigned Int 32 with "Not Implemented" value'
        expression: 'uint32(hr:0#2; 0xDEAD 0xDEAD)'
      - id: 'Int32Constant'
        description:  'Int 32'
        expression: 'int32("0xB669 0xFD2E")'
      - id: 'UnsignedInt32Constant'
        description:  'Unsigned Int 32 Constant'
        expression: 'uint32("0xB669 0xFD2E")'
      - id:          'Int32String'
        description: 'Int 32 converted to String'
        expression:   "concat('>' , Int32Constant - UnsignedInt32 , '<')"

  - id: 'Integer64Block'
    description: 'Fields that are a 64 bit integer'
    fields:
      - id: 'Int64'
        description:  'Int 64'
        expression: 'int64(hr:0#4)'
      - id: 'Int64_NI'
        description:  'Int 64 with "Not Implemented" value'
        expression: 'int64(hr:0#4; 0xDEAD 0xDEAD 0xDEAD 0xDEAD)'
      - id: 'UnsignedInt64'
        description:  'Unsigned Int 64'
        expression: 'uint64(hr:0#4)'
      - id: 'UnsignedInt64_NI'
        description:  'Unsigned Int 64 with "Not Implemented" value'
        expression: 'uint64(hr:0#4; 0xDEAD 0xDEAD 0xDEAD 0xDEAD)'
      - id: 'Int64Constant'
        description:  'Int 64'
        expression: 'int64("0x1122 0x10F4 0x7DE9 0x8115")'
      - id: 'UnsignedInt64Constant'
        description:  'Unsigned Int 64 Constant'
        expression: 'uint64("0x1122 0x10F4 0x7DE9 0x8115")'
      - id:          'Int64String'
        description: 'Int 64 converted to String'
        expression:   "concat('>' , Int64Constant - UnsignedInt64 , '<')"
  - id: 'RegisterBlockSingle'
    description: 'Fields that simply retrieve a single register as-is'
    fields:
      - id: 'Holding0_short'
        expression: "hexstring(hr:0)"
      - id: 'Holding0_long'
        expression: "hexstring(holding-register:0)"
      - id: 'Holding0_x1'
        expression: "hexstring(4x1)"
      - id: 'Holding0_x2'
        expression: "hexstring(4x000000001)"
      - id: 'Holding0_modspec5'
        expression: "hexstring(40001)"
      - id: 'Holding0_modspec6'
        expression: "hexstring(400001)"

  - id: 'RegisterBlockThreeCount'
    description: 'Fields that simply retrieve a range of 3 registers by specifying a count'
    fields:
      - id: 'Holding0_short'
        expression: "hexstring(hr:0 #3)"
      - id: 'Holding0_long'
        expression: "hexstring(holding-register:0#3)"
      - id: 'Holding0_x1'
        expression: "hexstring(4x1#3)"
      - id: 'Holding0_x2'
        expression: "hexstring(4x000000001#3)"
      - id: 'Holding0_modspec5'
        expression: "hexstring(40001#3)"
      - id: 'Holding0_modspec6'
        expression: "hexstring(400001#3)"

  - id: 'RegisterBlockThreeRange'
    description: 'Fields that simply retrieve a range of 3 registers by specifying the first and last'
    fields:
      - id: 'Holding0_short'
        expression: "hexstring(hr:0 .. hr:2 )"
      - id: 'Holding0_long'
        expression: "hexstring(holding-register:0 .. holding-register:2)"
      - id: 'Holding0_x1'
        expression: "hexstring(4x1..4x3 )"
      - id: 'Holding0_x2'
        expression: "hexstring(4x000000001..   4x000000003)"
      - id: 'Holding0_modspec5'
        expression: "hexstring(40001 .. 40003)"
      - id: 'Holding0_modspec6'
        expression: "hexstring(400001 .. 400003)"

  - id: 'RegisterBlockThree'
    description: 'Fields that simply retrieve a range of 3 registers by specifying them individually'
    fields:
      - id: 'Holding0_short'
        expression: "hexstring(hr:0, hr:1, hr:2 )"
      - id: 'Holding0_long'
        expression: "hexstring(holding-register:0, holding-register:1, holding-register:2)"
      - id: 'Holding0_x1'
        expression: "hexstring(4x1, 4x2 , 4x3 )"
      - id: 'Holding0_x2'
        expression: "hexstring(4x000000001 ,4x000000002   ,   4x000000003)"
      - id: 'Holding0_modspec5'
        expression: "hexstring(40001 , 40002 , 40003)"
      - id: 'Holding0_modspec6'
        expression: "hexstring(400001 , 400002  , 400003)"

  - id: 'RegisterBlockThreeMixed'
    description: 'Fields that simply retrieve a range of 3 registers by specifying them individually'
    fields:
      - id: 'Holding0_mix1'
        description: 'Holding register Mixed formats 1'
        expression: "hexstring(hr:0,holding-register:1 ,4x3 )"
      - id: 'Holding0_mix2'
        description: 'Holding register Mixed formats 2'
        expression: "hexstring(holding-register:0,4x000000002,400003)"
      - id: 'Holding0_mix3'
        description: 'Holding register Mixed formats 3'
        expression: "hexstring(400001, 40002 ,4x3)"
      - id: 'Holding0_mix4'
        description: 'Holding register Mixed formats 4'
        expression: "hexstring(4x000000001 ,40002 ,holding-register:2)"

  - id: 'RegisterBlockThreeRangeMixed'
    description: 'Fields that simply retrieve a range of 3 registers by specifying the first and last'
    fields:
      - id: 'Holding0_mix1'
        description: 'Holding register Mixed formats 1'
        expression: "hexstring(hr:0..4x3 )"
      - id: 'Holding0_mix2'
        description: 'Holding register Mixed formats 2'
        expression: "hexstring(holding-register:0  ..400003)"
      - id: 'Holding0_mix3'
        description: 'Holding register Mixed formats 3'
        expression: "hexstring(400001 .. 4x3)"
      - id: 'Holding0_mix4'
        description: 'Holding register Mixed formats 4'
        expression: "hexstring(4x000000001.. holding-register:2)"
  - id: 'StringsBlock'
    description: 'Fields that are a string'
    fields:
      - id: 'StringUtf8'
        description: 'A UTF8 encoded string'
        expression: 'utf8(hr:0 # 12)'
      - id: 'StringHex'
        description: 'A hex dump of a set of bytes'
        expression: 'hexstring(hr:0 # 12)'
      - id: 'StringConcat'
        description: 'A concat'
        expression: 'concat(''!'' , utf8(hr:0 # 3) , ''~'' , StringUtf8 , ''"'')'

tests:
  - id: 'BitSwapping: Single register value check'
    description: 'Normal values'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: ABCD
    blocks:
      - id: 'BitSwappingBlock'
        expected:
          SwapEndian: [ '0xB3 0xD5' ]
          SwapBytes: [ '0xCD 0xAB' ]

  - id: 'Bitset: Single register value check Not Implemented'
    description: 'Normal values'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: DEAD
    blocks:
      - id: 'BitsetBlock'
        expected:
          Bitset1: [ 'Zero', 'Two', 'Bit 3', 'Bit 5', 'Bit 7', 'Bit 9', 'Bit 10', 'Bit 11', 'Bit 12', 'Bit 14', 'Bit 15' ]
          Bitset1_NI: [ ]

  - id: 'Bitset: Single register value check 0000'
    description: 'Checking output of single register bits'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 0000
    blocks:
      - id: 'BitsetBlock'
        expected:
          Bitset1: [ ]
          Bitset1_NI: [ ]

  - id: 'Bitset: Single register value check 0001'
    description: 'Checking output of single register bits'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 0001
    blocks:
      - id: 'BitsetBlock'
        expected:
          Bitset1: [ 'Zero' ]
          Bitset1_NI: [ 'Zero' ]

  - id: 'Bitset: Single register value check 0002'
    description: 'Checking output of single register bits'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 0002
    blocks:
      - id: 'BitsetBlock'
        expected:
          Bitset1: [ 'One' ]
          Bitset1_NI: [ 'One' ]

  - id: 'Bitset: Single register value check 0003'
    description: 'Checking output of single register bits'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 0003
    blocks:
      - id: 'BitsetBlock'
        expected:
          Bitset1: [ 'Zero', 'One' ]
          Bitset1_NI: [ 'Zero', 'One' ]

  - id: 'Bitset: Single register value check 0004'
    description: 'Checking output of single register bits'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 0004
    blocks:
      - id: 'BitsetBlock'
        expected:
          Bitset1: [ 'Two' ]
          Bitset1_NI: [ 'Two' ]

  - id: 'Bitset: Single register value check 0005'
    description: 'Checking output of single register bits'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 0005
    blocks:
      - id: 'BitsetBlock'
        expected:
          Bitset1: [ 'Zero', 'Two' ]
          Bitset1_NI: [ 'Zero', 'Two' ]

  - id: 'Bitset: Single register value check 0006'
    description: 'Checking output of single register bits'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 0006
    blocks:
      - id: 'BitsetBlock'
        expected:
          Bitset1: [ 'One', 'Two' ]
          Bitset1_NI: [ 'One', 'Two' ]

  - id: 'Bitset: Single register value check 0007'
    description: 'Checking output of single register bits'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 0007
    blocks:
      - id: 'BitsetBlock'
        expected:
          Bitset1: [ 'Zero', 'One', 'Two' ]
          Bitset1_NI: [ 'Zero', 'One', 'Two' ]

  - id: 'Bitset: Single register value check 000F'
    description: 'Checking output of single register bits'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 000F
    blocks:
      - id: 'BitsetBlock'
        expected:
          Bitset1: [ 'Zero', 'One', 'Two', 'Bit 3' ]
          Bitset1_NI: [ 'Zero', 'One', 'Two', 'Bit 3' ]

  - id: 'Bitset: Single register value check 100F'
    description: 'Checking output of single register bits'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 100F
    blocks:
      - id: 'BitsetBlock'
        expected:
          Bitset1: [ 'Zero', 'One', 'Two', 'Bit 3', 'Bit 12' ]
          Bitset1_NI: [ 'Zero', 'One', 'Two', 'Bit 3', 'Bit 12' ]

  - id: 'Bitset: Multiple registers'
    description: 'Checking output of multiple register bits'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 100F 100F 100F 100F
    blocks:
      - id: 'BitsetBlock'
        expected:
          Bitset2: [ 'Zero', 'One', 'Two', 'Bit 3', 'Bit 12', 'Sixteen', 'Seventeen', 'Eighteen', 'Bit 19', 'Bit 28' ]
          Bitset2_NI: [ 'Zero', 'One', 'Two', 'Bit 3', 'Bit 12', 'Sixteen', 'Seventeen', 'Eighteen', 'Bit 19', 'Bit 28' ]
          Bitset3: [ '0', '1', '2', 'Bit 3', 'Bit 12', '16', '17', '18', 'Bit 19', 'Bit 28', '32', '33', '34', 'Bit 35', 'Bit 44' ]
          Bitset3_NI: [ '0', '1', '2', 'Bit 3', 'Bit 12', '16', '17', '18', 'Bit 19', 'Bit 28', '32', '33', '34', 'Bit 35', 'Bit 44' ]
          Bitset4: [ '0', '1', '2', 'Bit 3', 'Bit 12', '16', '17', '18', 'Bit 19', 'Bit 28', '32', '33', '34', 'Bit 35', 'Bit 44', '48', '49', '50', 'Bit 51', 'Bit 60' ]
          Bitset4_NI: [ '0', '1', '2', 'Bit 3', 'Bit 12', '16', '17', '18', 'Bit 19', 'Bit 28', '32', '33', '34', 'Bit 35', 'Bit 44', '48', '49', '50', 'Bit 51', 'Bit 60' ]

  - id: 'Bitset: Multiple registers Not Implemented'
    description: 'Checking output of 2 register bits Not Implemented'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: DEAD DEAD DEAD DEAD
    blocks:
      - id: 'BitsetBlock'
        expected:
          Bitset2: [ 'Zero', 'Two', 'Bit 3', 'Bit 5', 'Bit 7', 'Bit 9', 'Bit 10', 'Bit 11', 'Bit 12', 'Bit 14', 'Bit 15', 'Sixteen', 'Eighteen', 'Bit 19', 'Bit 21', 'Bit 23', 'Bit 25', 'Bit 26', 'Bit 27', 'Bit 28', 'Bit 30', 'Bit 31' ]
          Bitset2_NI: [ ]
          Bitset3: [ '0', '2', 'Bit 3', 'Bit 5', 'Bit 7', 'Bit 9', 'Bit 10', 'Bit 11', 'Bit 12', 'Bit 14', 'Bit 15', '16', '18', 'Bit 19', 'Bit 21', 'Bit 23', 'Bit 25', 'Bit 26', 'Bit 27', 'Bit 28', 'Bit 30', 'Bit 31', '32', '34', 'Bit 35', 'Bit 37', 'Bit 39', 'Bit 41', 'Bit 42', 'Bit 43', 'Bit 44', 'Bit 46', 'Bit 47' ]
          Bitset3_NI: [ ]
          Bitset4: [ '0', '2', 'Bit 3', 'Bit 5', 'Bit 7', 'Bit 9', 'Bit 10', 'Bit 11', 'Bit 12', 'Bit 14', 'Bit 15', '16', '18', 'Bit 19', 'Bit 21', 'Bit 23', 'Bit 25', 'Bit 26', 'Bit 27', 'Bit 28', 'Bit 30', 'Bit 31', '32', '34', 'Bit 35', 'Bit 37', 'Bit 39', 'Bit 41', 'Bit 42', 'Bit 43', 'Bit 44', 'Bit 46', 'Bit 47', '48', '50', 'Bit 51', 'Bit 53', 'Bit 55', 'Bit 57', 'Bit 58', 'Bit 59', 'Bit 60', 'Bit 62', 'Bit 63' ]
          Bitset4_NI: [ ]

  - id: 'Calculations: Simple values'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 0000
    blocks:
      - id: 'SimpleValues'
        expected:
          DoublePos: [ 1234.110 ]
          DoubleNeg: [ -1234.110 ]
          DoublePosBraces: [ 1234.110 ]
          DoubleNegBraces: [ -1234.110 ]
          LongPos: [ 1234 ]
          LongNeg: [ -1234 ]
          LongPosBraces: [ 1234 ]
          LongNegBraces: [ -1234 ]

  - id: 'Calculations: Basic operations'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 0000
    blocks:
      - id: 'BasicOperations'
        expected:
          LongDoublePower: [ 202.582 ]
          DoubleLongPowerPos: [ 166.375 ]
          DoubleLongPowerNeg: [ 0.001 ]
          DoubleDoublePower: [ 277.458 ]
          LongDoubleMultiply: [ 16.500 ]
          DoubleLongMultiply: [ 16.500 ]
          DoubleDoubleMultiply: [ 18.150 ]
          LongDoubleImplicitMultiply: [ 16.500 ]
          LongDoubleLongImplicitMultiply: [ 16.500 ]
          LongLongDoubleImplicitMultiply: [ 16.500 ]
          DoubleLongImplicitMultiply1: [ 16.500 ]
          DoubleLongImplicitMultiply2: [ 16.500 ]
          DoubleDoubleBracesImplicitMultiply: [ 18.150 ]
          DoubleLongDoubleBracesImplicitMultiply: [ 18.150 ]
          LongLongBracesImplicitMultiply: [ 15 ]
          LongLongDivide: [ 1.667 ]
          LongDoubleDivide: [ 1.515 ]
          DoubleLongDivide: [ 1.833 ]
          DoubleDoubleDivide: [ 1.667 ]
          LongDoubleAdd: [ 8.300 ]
          DoubleLongAdd: [ 8.500 ]
          DoubleDoubleAdd: [ 8.800 ]
          LongDoubleMinus: [ 1.700 ]
          DoubleLongMinus: [ 2.500 ]
          DoubleDoubleMinus: [ 2.200 ]
          LongLongMultiply: [ 15 ]
          LongLongAdd: [ 8 ]
          LongLongSubtract: [ 2 ]

  - id: 'Calculations: Complex operations (PEMDAS)'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 0000
    blocks:
      - id: 'ComplexOperations'
        expected:
          Pemdas1: [ 16.000 ]
          Pemdas2: [ 1.000 ]

          # https://youtu.be/2hsW8_Wpffk
          Pemdas3: [ 29.000 ]

          # https://www.chilimath.com/lessons/introductory-algebra/order-of-operations-practice-problems/
          Pemdas4: [ 1.000 ]
          Pemdas5: [ 9.000 ]
          Pemdas6: [ 2.000 ]
          Pemdas7: [ 26.000 ]
          Pemdas8: [ -1.000 ]
          Pemdas9: [ -3.000 ]
          Pemdas10: [ 4.000 ]
          Pemdas11: [ 23.000 ]
          Pemdas12: [ 10.000 ]

          # https://leverageedu.com/blog/pemdas/    [            ]
          Pemdas13: [ 178 ]
          Pemdas14: [ 166382 ]
          Pemdas15: [ 3.000 ]
          Pemdas16: [ 398 ]
          Pemdas17: [ 71.000 ]

          Pemdas18: [ -221.000 ]
          Pemdas19: [ -142 ]
          Pemdas20: [ 5.000 ]
          Pemdas21: [ 3.000 ]
          Pemdas22: [ -6.000 ]

  - id: 'Field Calculations: Simple'
    description: 'Calculations that combine the values of several fields'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 449A 5225 4093 4A45 84FC D47C 3039   CFC7     8000
        #         | float32  | float64           |uint16| int16 | int16
        #         | 1234.567 | 1234.568          |12345 |-12345 | 1 (after endian change)
    blocks:
      - id: 'FieldCalculations'
        expected:
          One: [ 1234.567 ]
          Two: [ 1234.568 ]
          Three: [ 12345 ]
          Four: [ -12345 ]
          Factor: [ 1 ]
          Combined: [ 24691.349 ]

  - id: 'Field Calculations: Pemdas'
    description: 'Calculations that combine the values of several fields'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 0008 0010 0005 0002 000A
    blocks:
      - id: 'PemdasFieldCalculations'
        expected:
          Eight: [ 8 ]
          Sixteen: [ 16 ]
          Five: [ 5 ]
          Two: [ 2 ]
          Ten: [ 10 ]
          Pemdas: [ 398.000 ]

  - id: 'EUI48: Normal values'
    description: 'Test with normal values'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 0102 0304 0506 0708
    blocks:
      - id: 'EUI48Block'
        expected:
          EUI48_3: [ '01:02:03:04:05:06' ]
          EUI48_3_NI: [ '01:02:03:04:05:06' ]
          EUI48_4: [ '03:04:05:06:07:08' ]
          EUI48_4_NI: [ '03:04:05:06:07:08' ]

  - id: 'EUI48: Not Implemented'
    description: 'Test with Not Implemented values'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: DEAD DEAD DEAD DEAD
    blocks:
      - id: 'EUI48Block'
        expected:
          EUI48_3: [ 'DE:AD:DE:AD:DE:AD' ]
          EUI48_3_NI: [ ]
          EUI48_4: [ 'DE:AD:DE:AD:DE:AD' ]
          EUI48_4_NI: [ ]

  - id: 'Enum: Normal values'
    description: 'Normal values'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 0001 000F 4240
    blocks:
      - id: 'EnumBlock'
        expected:
          Enum1: [ 'Manual' ]
          Enum1_NI: [ 'Manual' ]
          Enum2: [ 'Million' ]
          Enum2_NI: [ 'Million' ]

  - id: 'Enum: Not mapped values'
    description: 'Normal values'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 0004 000F 4241
    blocks:
      - id: 'EnumBlock'
        expected:
          Enum1: [ 'No mapping for value 0x00 0x04' ]
          Enum1_NI: [ 'No mapping for value 0x00 0x04' ]
          Enum2: [ 'No mapping for value 0x00 0x0F 0x42 0x41' ]
          Enum2_NI: [ 'No mapping for value 0x00 0x0F 0x42 0x41' ]

  - id: 'Enum: Not Implemented'
    description: 'Not Implemented values'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: DEAD DEAD DEAD
    blocks:
      - id: 'EnumBlock'
        expected:
          Enum1: [ 'No mapping for value 0xDE 0xAD' ]
          Enum1_NI: [ ]
          Enum2: [ 'No mapping for value 0xDE 0xAD 0xDE 0xAD' ]
          Enum2_NI: [ ]

  - id: 'Float: Not Implemented'
    description: 'Normal values'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: DEAD DEAD DEAD DEAD DEAD DEAD
    blocks:
      - id: 'Float32Block'
        expected:
          Float32: [ -6264320714451452000.000 ]
          Float32_NI: [ ]
          Float32String: [ '>-6.264320714451452E18<' ]
          Float32_NIString: [ '><' ]
      - id: 'Float64Block'
        expected:
          Float64: [ -11935504820988231000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.000 ]
          Float64_NI: [ ]
          Float64String: [ '>-1.1935504820988231E148<' ]
          Float64_NIString: [ '><' ]

  - id: 'Float: Not A Number (NaN)'
    description: 'Normal values'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 7Fc0 0000 7FF8 0000 0000 0000
    blocks:
      - id: 'Float32Block'
        expected:
          Float32: [ 'NaN' ]
          Float32_NI: [ 'NaN' ]
          Float32String: [ '>NaN<' ]
          Float32_NIString: [ '>NaN<' ]
      - id: 'Float64Block'
        expected:
          Float64: [ 'NaN' ]
          Float64_NI: [ 'NaN' ]
          Float64String: [ '>NaN<' ]
          Float64_NIString: [ '>NaN<' ]

  - id: 'Float: +Infinite'
    description: 'Normal values'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 7F80 0000 7FF0 0000 0000 0000
    blocks:
      - id: 'Float32Block'
        expected:
          Float32: [ '+Infinite' ]
          Float32_NI: [ '+Infinite' ]
          Float32String: [ '>Infinity<' ]
          Float32_NIString: [ '>Infinity<' ]
      - id: 'Float64Block'
        expected:
          Float64: [ '+Infinite' ]
          Float64_NI: [ '+Infinite' ]
          Float64String: [ '>Infinity<' ]
          Float64_NIString: [ '>Infinity<' ]

  - id: 'Float: -Infinite'
    description: 'Normal values'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: FF80 0000 FFF0 0000 0000 0000
    blocks:
      - id: 'Float32Block'
        expected:
          Float32: [ '-Infinite' ]
          Float32_NI: [ '-Infinite' ]
          Float32String: [ '>-Infinity<' ]
          Float32_NIString: [ '>-Infinity<' ]
      - id: 'Float64Block'
        expected:
          Float64: [ '-Infinite' ]
          Float64_NI: [ '-Infinite' ]
          Float64String: [ '>-Infinity<' ]
          Float64_NIString: [ '>-Infinity<' ]

  - id: 'Float: Normal values'
    description: 'Normal values'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 449A 5225 4093 4A45 84FC D47C
    blocks:
      - id: 'Float32Block'
        expected:
          Float32: [ 1234.567 ]
          Float32_NI: [ 1234.567 ]
          Float32String: [ '>1234.5670166015625<' ]
          Float32_NIString: [ '>1234.5670166015625<' ]
      - id: 'Float64Block'
        expected:
          Float64: [ 1234.568 ] # 1234.56789012
          Float64_NI: [ 1234.568 ] # 1234.56789012
          Float64String: [ '>1234.56789012<' ]
          Float64_NIString: [ '>1234.56789012<' ]

  - id: 'IPv4: Normal values'
    description: 'Normal values'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 0102 0304
    blocks:
      - id: 'IPv4Block'
        expected:
          IPv4: [ '1.2.3.4' ]
          IPv4_NI: [ '1.2.3.4' ]

  - id: 'IPv4: Not Implemented'
    description: 'Not Implemented values'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 0000 0000
    blocks:
      - id: 'IPv4Block'
        expected:
          IPv4: [ '0.0.0.0' ]
          IPv4_NI: [ ]

  - id: 'IPv6: Normal values'
    description: 'Normal values'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 0001 0203 0405 0607 0809 0A0B 0C0D 0E0F
    blocks:
      - id: 'IPv6Block'
        expected:
          IPv6: [ '0001:0203:0405:0607:0809:0A0B:0C0D:0E0F' ]
          IPv6_NI: [ '0001:0203:0405:0607:0809:0A0B:0C0D:0E0F' ]

  - id: 'IPv6: Not Implemented'
    description: 'Not Implemented values'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: DEAD DEAD DEAD DEAD DEAD DEAD DEAD DEAD
    blocks:
      - id: 'IPv6Block'
        expected:
          IPv6: [ 'DEAD:DEAD:DEAD:DEAD:DEAD:DEAD:DEAD:DEAD' ]
          IPv6_NI: [ ]

  - id: 'Integer 16 bits: Normal Value (Positive)'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 3039
    blocks:
      - id: 'Integer16Block'
        expected:
          Int16: [ 12345 ]
          Int16_NI: [ 12345 ]
          UnsignedInt16: [ 12345 ]
          UnsignedInt16_NI: [ 12345 ]
          Int16String: [ '>-24690<' ]

  - id: 'Integer 16 bits: Normal value (Negative)'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: CFC7
    blocks:
      - id: 'Integer16Block'
        expected:
          Int16: [ -12345 ]
          Int16_NI: [ -12345 ]
          UnsignedInt16: [ 53191 ]
          UnsignedInt16_NI: [ 53191 ]
          Int16String: [ '>-65536<' ]

  - id: 'Integer 16 bits: Not Implemented'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: DEAD
    blocks:
      - id: 'Integer16Block'
        expected:
          Int16: [ -8531 ]
          Int16_NI: [ ]
          UnsignedInt16: [ 57005 ]
          UnsignedInt16_NI: [ ]
          Int16String: [ '>-69350<' ]

  - id: 'Integer 16 bits: Constants'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: DEAD # Not used
    blocks:
      - id: 'Integer16Block'
        expected:
          Int16Constant: [ -12345 ]
          UnsignedInt16Constant: [ 53191 ]
          Int16String: [ '>-69350<' ]

  - id: 'Integer 32 bits: Normal value (Positive)'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 4996 02D2
    blocks:
      - id: 'Integer32Block'
        expected:
          Int32: [ 1234567890 ]
          Int32_NI: [ 1234567890 ]
          UnsignedInt32: [ 1234567890 ]
          UnsignedInt32_NI: [ 1234567890 ]
          Int32String: [ '>-2469135780<' ]


  - id: 'Integer 32 bits: Normal value (Negative)'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: B669 FD2E
    blocks:
      - id: 'Integer32Block'
        expected:
          Int32: [ -1234567890 ]
          Int32_NI: [ -1234567890 ]
          UnsignedInt32: [ 3060399406 ]
          UnsignedInt32_NI: [ 3060399406 ]
          Int32String: [ '>-4294967296<' ]


  - id: 'Integer 32 bits: Not Implemented'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: DEAD DEAD
    blocks:
      - id: 'Integer32Block'
        expected:
          Int32: [ -559030611 ]
          Int32_NI: [ ]
          UnsignedInt32: [ 3735936685 ]
          UnsignedInt32_NI: [ ]
          Int32String: [ '>-4970504575<' ]

  - id: 'Integer 32 bits: Constants'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: DEAD # Not used
    blocks:
      - id: 'Integer32Block'
        expected:
          Int32Constant: [ -1234567890 ]
          UnsignedInt32Constant: [ 3060399406 ]
          Int32String: [ '><' ] # Because part of the required value failed

  - id: 'Integer 64 bits: Normal value (Positive)'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 1122 10F4 7DE9 8115
    blocks:
      - id: 'Integer64Block'
        expected:
          Int64: [ 1234567890123456789 ]
          Int64_NI: [ 1234567890123456789 ]
          UnsignedInt64: [ 1234567890123456789 ]
          UnsignedInt64_NI: [ 1234567890123456789 ]
          Int64String: [ '>0<' ]

  # Known problem; There is no unsigned 64 bit int in Java, so this is really an unsigned 63 bit int.
  # Any value that is a negative int64 is always an impossible value for an uint64.
  # If you get too big then I made it to simply fail.

  - id: 'Integer 64 bits: Normal value (Negative)'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: EEDD EF0B 8216 7EEB
    blocks:
      - id: 'Integer64Block'
        expected:
          Int64: [ -1234567890123456789 ]
          Int64_NI: [ -1234567890123456789 ]
          UnsignedInt64: [ ] # Too large for unsigned 64 bit in JVM
          UnsignedInt64_NI: [ ] # Too large for unsigned 64 bit in JVM
          Int64String: [ '><' ] # Because part of the required value failed

  - id: 'Integer 64 bits: Not Implemented'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: DEAD DEAD DEAD DEAD
    blocks:
      - id: 'Integer64Block'
        expected:
          Int64: [ -2401018187971961171 ]
          Int64_NI: [ ]
          UnsignedInt64: [ ] # Too large for unsigned 64 bit in JVM
          UnsignedInt64_NI: [ ]
          Int64String: [ '><' ] # Because part of the required value failed

  - id: 'Integer 64 bits: Constants'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: DEAD # Not used
    blocks:
      - id: 'Integer64Block'
        expected:
          Int64Constant: [ 1234567890123456789 ]
          UnsignedInt64Constant: [ 1234567890123456789 ]
          Int64String: [ '><' ] # Because part of the required value failed

  - id: 'RegisterAddressing: Get single register'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 0102 0304 0506 0708
    blocks:
      - id: 'RegisterBlockSingle'
        expected:
          Holding0_short: [ '0x01 0x02' ]
          Holding0_long: [ '0x01 0x02' ]
          Holding0_x1: [ '0x01 0x02' ]
          Holding0_x2: [ '0x01 0x02' ]
          Holding0_modspec5: [ '0x01 0x02' ]
          Holding0_modspec6: [ '0x01 0x02' ]

  - id: 'RegisterAddressing: Get 3 registers using count'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 0102 0304 0506 0708
    blocks:
      - id: 'RegisterBlockThreeCount'
        expected:
          Holding0_short: [ '0x01 0x02 0x03 0x04 0x05 0x06' ]
          Holding0_long: [ '0x01 0x02 0x03 0x04 0x05 0x06' ]
          Holding0_x1: [ '0x01 0x02 0x03 0x04 0x05 0x06' ]
          Holding0_x2: [ '0x01 0x02 0x03 0x04 0x05 0x06' ]
          Holding0_modspec5: [ '0x01 0x02 0x03 0x04 0x05 0x06' ]
          Holding0_modspec6: [ '0x01 0x02 0x03 0x04 0x05 0x06' ]

  - id: 'RegisterAddressing: Get 3 registers using range'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 0102 0304 0506 0708
    blocks:
      - id: 'RegisterBlockThreeRange'
        expected:
          Holding0_short: [ '0x01 0x02 0x03 0x04 0x05 0x06' ]
          Holding0_long: [ '0x01 0x02 0x03 0x04 0x05 0x06' ]
          Holding0_x1: [ '0x01 0x02 0x03 0x04 0x05 0x06' ]
          Holding0_x2: [ '0x01 0x02 0x03 0x04 0x05 0x06' ]
          Holding0_modspec5: [ '0x01 0x02 0x03 0x04 0x05 0x06' ]
          Holding0_modspec6: [ '0x01 0x02 0x03 0x04 0x05 0x06' ]

  - id: 'RegisterAddressing: Get 3 registers using multiple explicit registers'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 0102 0304 0506 0708
    blocks:
      - id: 'RegisterBlockThree'
        expected:
          Holding0_short: [ '0x01 0x02 0x03 0x04 0x05 0x06' ]
          Holding0_long: [ '0x01 0x02 0x03 0x04 0x05 0x06' ]
          Holding0_x1: [ '0x01 0x02 0x03 0x04 0x05 0x06' ]
          Holding0_x2: [ '0x01 0x02 0x03 0x04 0x05 0x06' ]
          Holding0_modspec5: [ '0x01 0x02 0x03 0x04 0x05 0x06' ]
          Holding0_modspec6: [ '0x01 0x02 0x03 0x04 0x05 0x06' ]

  - id: 'RegisterAddressing: Get 3 registers using multiple explicit registers in mixed formats'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 0102 0304 0506 0708
    blocks:
      - id: 'RegisterBlockThreeMixed'
        expected:
          Holding0_mix1: [ '0x01 0x02 0x03 0x04 0x05 0x06' ]
          Holding0_mix2: [ '0x01 0x02 0x03 0x04 0x05 0x06' ]
          Holding0_mix3: [ '0x01 0x02 0x03 0x04 0x05 0x06' ]
          Holding0_mix4: [ '0x01 0x02 0x03 0x04 0x05 0x06' ]

  - id: 'RegisterAddressing: Get 3 registers using ranges of registers in mixed formats'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 0102 0304 0506 0708
    blocks:
      - id: 'RegisterBlockThreeRangeMixed'
        expected:
          Holding0_mix1: [ '0x01 0x02 0x03 0x04 0x05 0x06' ]
          Holding0_mix2: [ '0x01 0x02 0x03 0x04 0x05 0x06' ]
          Holding0_mix3: [ '0x01 0x02 0x03 0x04 0x05 0x06' ]
          Holding0_mix4: [ '0x01 0x02 0x03 0x04 0x05 0x06' ]

  - id: 'String: Empty'
    description: 'Test with NO letters only 0x000 bytes'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
    blocks:
      - id: 'StringsBlock'
        expected:
          StringUtf8: [ '' ]
          StringHex: [ '0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00' ]
          StringConcat: [ '!~"' ]

  - id: 'String: Plain ASCII'
    description: 'Test with only plain ASCII'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 4e69 656c 7320 4261 736a 6573 0000 0000 0000 0000 0000 0000
    blocks:
      - id: 'StringsBlock'
        expected:
          StringUtf8: [ 'Niels Basjes' ]
          StringHex: [ '0x4E 0x69 0x65 0x6C 0x73 0x20 0x42 0x61 0x73 0x6A 0x65 0x73 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00' ]
          StringConcat: [ '!Niels ~Niels Basjes"' ]

  - id: 'String: Emoji'
    description: 'Test with emojis in the String'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 4e69 656c 7320 4261 736a 6573 20f0 9f98 98f0 9f96 9600 0000
    blocks:
      - id: 'StringsBlock'
        expected:
          StringUtf8: [ 'Niels Basjes 😘🖖' ]
          StringHex: [ '0x4E 0x69 0x65 0x6C 0x73 0x20 0x42 0x61 0x73 0x6A 0x65 0x73 0x20 0xF0 0x9F 0x98 0x98 0xF0 0x9F 0x96 0x96 0x00 0x00 0x00' ]
          StringConcat: [ '!Niels ~Niels Basjes 😘🖖"' ]

  - id: 'String: Invalid'
    description: 'Test with a null byte which should terminate the String earlier'
    input:
      - firstRegisterAddress: 'hr:0'
        registers: 4e69 656c 7320 4261 736a 6573 00f0 9f98 98f0 9f96 9600 0000
        #                                        ^^ null byte.
    blocks:
      - id: 'StringsBlock'
        expected:
          StringUtf8: [ 'Niels Basjes' ]
          StringHex: [ '0x4E 0x69 0x65 0x6C 0x73 0x20 0x42 0x61 0x73 0x6A 0x65 0x73 0x00 0xF0 0x9F 0x98 0x98 0xF0 0x9F 0x96 0x96 0x00 0x00 0x00' ]
          StringConcat: [ '!Niels ~Niels Basjes"' ]
